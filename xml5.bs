<h1>XML5</h1>
<pre class='metadata'>
Title:XML 5
Status:ED
ED: http://www.example.org
Shortname: xml5
Level:1
Editor: Anne van Kesteren, Opera Software ASA, <annevk@annevk.nl>
Abstract: Something something
Editor: Daniel Fath, Unaffiliated,  <daniel.fath7@gmail.com>
Group: whatwg
</pre>
<style type="text/css">
  switch { padding-left: 2em; }
  switch dt {text-indent: -1.5em; }
  switch dt:before {content: '\21AA'; padding: 0 0.5em 0 0; display: inline-block;}
  .non-print { background-color: #BFBFBF;  border-radius: 0.2em;}
</style>

<h2 class="heading" data-level="1" id="parsing">
  <span class="content">Parsing XML documents</span>
</h2>

<p>This section and its subsection define the <dfn>XML parser</dfn>.</p>
<p>This specification defines the parsing rules for XML documents, whether they are syntactically correct or not. Certain points in the parsing algorithm are said to be parse errors. The handling for parse errors is well-defined: user agents must either act as described below when encountering such problems, or must terminate processing at the first error that they encounter for which they do not wish to apply the rules described below.</p>

<h3 class="heading" data-level="1" id="parsing-overview">
  <span class="content">Parsing overview</span>
</h3>

<dl>
  <dt><dfn>Data state</dfn></dt>

  <dd>
    <p>Consume the next input character:</p>
    <dl class="switch">
      <dt>U+0026 (<code>&amp;</code>)
      <dd class="warning">TODO</dd>

      <dt>U+003C (<code>&lt;</code>)</dt>
      <dd>Switch to the <a>Tag state</a>.</dd>

      <dt>EOF</dt>
      <dd>Emit an end-of-file token.</dd>

      <dt>Anything else</dt>
      <dd>Emit the input character as character. Stay in this state.</dd>
    </dl>
  </dd>

  <dt><dfn>Tag state</dfn></dt>

  <dd>
    <p>Consume the next input character:</p>
    <dl class="switch">
      <dt>U+002F (<code>/</code>)</dt>
      <dd>Switch to the <a>End tag state</a>.</dd>

      <dt>U+003F (<code>?</code>)</dt>

      <dd>Switch to the <a>pi state</a>.</dd>

      <dt>U+0021 (<code>!</code>)</dt>
      <dd>Switch to the <a>markup declaration state</a>.</dd>

      <dt>U+0009 (<code class="non-print">Tab</code>)</dt>
      <dt>U+000A (<code class="non-print">LF</code>)</dt>
      <dt>U+0020 (<code class="non-print">Space</code>)</dt>
      <dt>U+003A (<code>:</code>)</dt>
      <dt>U+003C (<code>&lt;</code>)</dt>
      <dt>U+003E (<code>&gt;</code>)</dt>
      <dt>EOF</dt>

      <dd><span>Parse error</span>. Emit a U+003C (<code>&lt;</code>) character.
      Reconsume the current input character in the <a>data state</a>.</dd>

      <dt>Anything else</dt>

      <dd>Create a new tag token and set its name to the input character, then
         switch to the <a>tag name state</a>.</dd>
    </dl>
  </dd>

  <dt><dfn>End tag state</dfn></dt>

    <dd>
    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">
    <dt>U+003E (<code>&gt;</code>)</dt>

    <dd>Emit a short end tag token and then switch to the <a>data
    state</a>.</dd>
    <dt>U+0009 (<code class="non-print">Tab</code>)</dt>
    <dt>U+000A (<code class="non-print">LF</code>)</dt>
    <dt>U+0020 (<code class="non-print">Space</code>)</dt>
    <dt>U+003C (<code>&lt;</code>)</dt>
    <dt>U+003A (<code>:</code>)</dt>
    <dt>EOF</dt>

    <dd><span>Parse error</span>. Emit a U+003C (<code>&lt;</code>) character
     token and a U+002F (<code>/</code>) character token. Reconsume the current
     input character in the <a>data state</a>.</dd>

    <dt>Anything else</dt>

    <dd>Create an end tag token and set its name to the input character, then
     switch to the <a>end tag name state</a>.</dd>
    </dl>
    </dd>

  <dt><dfn>End tag name state</dfn></dt>

  <dd>
    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">
      <dt>U+0009 (<code class="non-print">Tab</code>)</dt>
      <dt>U+000A (<code class="non-print">LF</code>)</dt>
      <dt>U+0020 (<code class="non-print">Space</code>)</dt>
      <dd>Switch to the <a>end tag name after state</a>.</dd>

      <dt>EOF</dt>
      <dd><span>Parse error</span>. Emit the current token and then eprocess the
       current input character in the <a>data state</a>.</dd>

      <dt>U+003E (<code>&gt;</code>)</dt>
      <dd>Emit the current token and then switch to the <a>data
      state</a>.</dd>
      <dt>Anything else</dt>
      <dd>Append  the current input character to the tag name and stay in the
      current state.</dd>
    </dl>
  </dd>

  <dt><dfn>End tag name after state</dfn></dt>

  <dd>
    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">
      <dt>U+003E (<code>&gt;</code>)</dt>
      <dd>Emit the current token and then switch to the <a>data state</a>.</dd>

      <dt>U+0009 (<code class="non-print">Tab</code>)</dt>
      <dt>U+000A (<code class="non-print">LF</code>)</dt>
      <dt>U+0020 (<code class="non-print">Space</code>)</dt>
      <dd>Stay in the current state.</dd>

      <dt>EOF</dt>
      <dd><span>Parse error</span>. Emit the current token and then reprocess the
     current input character in the <a>data state</a>.</dd>

      <dt>Anything else</dt>
      <dd><span>Parse error</span>. Stay in the current state.</dd>
    </dl>
  </dd>

  <dt><dfn>Pi state</dfn></dt>
  <dd>
    <p>Consume the <span>next input character</span>:</p>
    <dl class="switch">
      <dt>U+0009 (<code class="non-print">Tab</code>)</dt>
      <dt>U+000A (<code class="non-print">LF</code>)</dt>
      <dt>U+0020 (<code class="non-print">Space</code>)</dt>
      <dt>EOF</dt>
      <dd><span>Parse error</span>. Reprocess the current input character in the
      <a>bogus comment state</a>.</dd>

      <dt>Anything else</dt>
      <dd>Create a new processing instruction token. Set target to the current
     input character and data to the empty string. Then switch to the <a>pi
     target state</a>.</dd>
    </dl>
  </dd>

  <dt><dfn>Pi target state</dfn></dt>
  <dd>
    <p>Consume the <span>next input character</span>:</p>
    <dl class="switch">
      <dt>U+0009 (<code class="non-print">Tab</code>)</dt>
      <dt>U+000A (<code class="non-print">LF</code>)</dt>
      <dt>U+0020 (<code class="non-print">Space</code>)</dt>
      <dd>Switch to the <a>pi target after state</a>.</dd>

      <dt>EOF</dt>
      <dd><span>Parse error</span>. Emit the current token and then reprocess the
     current input character in the <a>data state</a>.</dd>

      <dt>U+003F (<code>?</code>)</dt>
      <dd>Switch to the <a>pi after state</a>.</dd>

      <dt>Anything else</dt>
      <dd>Append the current input character to the processing instruction target and stay in the
      current state.</dd>
    </dl>
  </dd>

  <dt><dfn>Pi target after state</dfn></dt>
  <dd>
    <p>Consume the <span>next input character</span>:</p>
    <dl class="switch">
      <dt>U+0009 (<code class="non-print">Tab</code>)</dt>
      <dt>U+000A (<code class="non-print">LF</code>)</dt>
      <dt>U+0020 (<code class="non-print">Space</code>)</dt>
      <dd>Stay in the current state.</dd>

      <dt>Anything else</dt>
      <dd>Reprocess the current input character in the <a>pi data
     state</a>.</dd>
    </dl>
   </dd>

  <dt><dfn>Pi data state</dfn></dt>
  <dd>
    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">
      <dt>U+003F (<code>?</code>)</dt>
      <dd>Switch to the <a>pi after state</a>.</dd>

      <dt>EOF</dt>
      <dd><span>Parse error</span>. Emit the current token and then reprocess the
     current input character in the <a>data state</a>.</dd>

      <dt>Anything else</dt>
      <dd>Append the current input character to the pi's data and stay in the
     current state.</dd>
    </dl>
   </dd>

  <dt><dfn>Pi after state</dfn></dt>
    <dd>
    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">
      <dt>U+003E (<code>&gt;</code>)</dt>
      <dd>Emit the current token and then switch to the <span>data state</span>.</dd>

      <dt>U+003F (<code>?</code>)</dt>
      <dd>Append the current input character to the pi's data and stay in the
     current state.</dd>

      <dt>Anything else</dt>
      <dd>Reprocess the current input character in the <a>pi data
     state</a>.</dd>
    </dl>
   </dd>

  <dt><dfn>Markup declaration state</dfn></dt>
  <dd>
    <p>If the next two characters are both U+002D (<code>-</code>)
    characters, consume those two characters, create a comment token whose data
    is the empty string and then switch to the <a>comment state</a>.</p>

    <p>Otherwise, if the next seven characters are an exact match for
    "[CDATA[", then consume those characters and switch to the <a>CDATA
    state</a>.</p>

    <p>Otherwise, if the next seven characters are an exact match for "DOCTYPE",
    then this is a <span>parse error</span>. Consume those characters and switch
    to the <a>DOCTYPE state</a>.</p>
    <!-- XXX make them legal? -->

    <p>Otherwise, this is a <span>parse error</span>. Switch to the <a>bogus
    comment state</a>.</p>
  </dd>

  <dt><dfn>Comment state</dfn></dt>
  <p class="warning">TODO</p>

  <dt><dfn>Comment dash state</dfn></dt>
  <p class="warning">TODO</p>

  <dt><dfn>CDATA state</dfn></dt>
  <p class="warning">TODO</p>

  <dt><dfn>DOCTYPE state</dfn></dt>
  <p class="warning">TODO</p>

  <dt><dfn>Comment state</dfn></dt>
  <p class="warning">TODO</p>

  <dt><dfn>Bogus comment state</dfn></dt>
  <p class="warning">TODO</p>

  <dt><dfn>Tag name state</dfn></dt>
  <p class="warning">TODO</p>


</dl>

<h2 class="heading" data-level="1" id="writing">
    <span class="content">Writing XML documents</span>
</h2>


<p class="warning">TODO</p>